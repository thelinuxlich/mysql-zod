import C from"node:path";import y from"camelcase";import $ from"fs-extra";import w from"knex";function z(t,m,p,u){const i=u.nullish&&u.nullish===!0,c=u.requiredString&&u.requiredString===!0,b=u.useDateType&&u.useDateType===!0,d=t.split("(")[0].split(" ")[0],n=p==="YES",e=["z.string().datetime()"],s=["z.string()"],r=["z.number()"],a=["z.boolean()"],l=i?"nullish()":"nullable()",g="email()",f="nonnegative()",o="min(1)";switch(d){case"date":case"datetime":case"timestamp":const h=b?e:s;return n&&h.push(l),h.join(".");case"time":case"year":case"char":case"varchar":return m.toLowerCase().includes("email")&&s.push(g),n?s.push(l):c&&s.push(o),s.join(".");case"tinytext":case"text":case"mediumtext":case"longtext":case"json":case"decimal":return n?s.push(l):c&&s.push(o),s.join(".");case"tinyint":return n&&a.push(l),a.join(".");case"smallint":case"mediumint":case"int":case"bigint":case"float":case"double":return t.endsWith(" unsigned")&&r.push(f),n&&r.push(l),r.join(".");case"enum":const x=[`z.enum([${t.replace("enum(","").replace(")","").replace(/,/g,", ")}])`];return n&&x.push(l),x.join(".")}}async function N(t){const m=w({client:"mysql2",connection:{host:t.host,port:t.port,user:t.user,password:t.password,database:t.database,ssl:t.ssl??{}}}),p=t.camelCase&&t.camelCase===!0;let i=(await m.raw("SELECT table_name as table_name FROM information_schema.tables WHERE table_schema = ?",[t.database]))[0].map(e=>e.table_name).filter(e=>!e.startsWith("knex_")).sort();const c=t.tables;c&&c.length&&(i=i.filter(e=>c.includes(e)));const b=t.ignore,d=b?.filter(e=>e.startsWith("/")&&e.endsWith("/")),n=b?.filter(e=>!d?.includes(e));n&&n.length&&(i=i.filter(e=>!n.includes(e))),d&&d.length&&(i=i.filter(e=>{let s=!0;return d.forEach(r=>{const a=r.substring(1,r.length-1);e.match(a)!==null&&(s=!1)}),s}));for(let e of i){const r=(await m.raw(`DESC ${e}`))[0];p&&(e=y(e));let a=`import z from 'zod'

export const ${e} = z.object({`;for(const o of r){const h=p?y(o.Field):o.Field,T=z(o.Type,o.Field,o.Null,t);a=`${a}
  ${h}: ${T},`}a=`${a}
})

export type ${y(`${e}Type`)} = z.infer<typeof ${e}>
`;const l=t.folder&&t.folder!==""?t.folder:".",g=t.suffix&&t.suffix!==""?`${e}.${t.suffix}.ts`:`${e}.ts`,f=C.join(l,g);console.log("Created:",f),$.outputFileSync(f,a)}await m.destroy()}export{N as generate};
